---
import DashboardLayout from "../layouts/Dashboard.astro";
import DashboardHeader from "../components/dashboard/DashboardHeader.astro";
import DashboardNav from "../components/dashboard/DashboardNav.astro";
import { StatCard } from "../components/ui/stat-card";
import { FighterSection } from "../components/dashboard/fighter-section";
import { createServerClient, type CookieOptions } from '@supabase/ssr';

// Use the auth middleware
export const prerender = false;

console.log("[Dashboard] Page load started");

// Log all request headers for debugging
const headers = Object.fromEntries(
  Array.from(Astro.request.headers.entries())
);
console.log("[Dashboard] All request headers:", headers);

// Log cookie details
const cookieHeader = Astro.request.headers.get('cookie');
console.log("[Dashboard] Raw cookie header:", cookieHeader);

// Create server-side Supabase client with cookie handling
const supabase = createServerClient(
  import.meta.env.PUBLIC_SUPABASE_URL,
  import.meta.env.PUBLIC_SUPABASE_ANON_KEY,
  {
    cookies: {
      get: (key: string) => Astro.cookies.get(key)?.value,
      set: (key: string, value: string, options: CookieOptions) => {
        Astro.cookies.set(key, value, {
          ...options,
          path: '/',
        });
      },
      remove: (key: string, options: CookieOptions) => {
        Astro.cookies.delete(key, {
          ...options,
          path: '/',
        });
      },
    },
  }
);

// Get session
const { data: { session } } = await supabase.auth.getSession();

console.log("[Dashboard] Auth session state:", {
  hasSession: !!session,
  sessionDetails: session ? {
    hasUser: !!session.user,
    userEmail: session.user?.email,
    expiresAt: session.expires_at
  } : null
});

// Dashboard data
const stats = [
  { name: 'Number of deploys', value: '9999' },
  { name: 'Average deploy time', value: '32', unit: 'seconds' },
  { name: 'Instances', value: '1' },
  { name: 'Status', value: 'ONLINE' },
];

// Mock fighter data - in a real app, this would come from an API or database
const ufcFighters = [
  { id: '1', name: 'Jon Jones', organization: 'UFC', image: '/pfp/2335639.png' },
  { id: '2', name: 'Alex Pereira', organization: 'UFC', image: '/pfp/4705658.png' },
  { id: '3', name: 'Alexander Volkanovski', organization: 'UFC', image: '/pfp/3949584.png' },
];

console.log("[Dashboard] Starting auth check");
try {
  if (!session) {
    console.log("[Dashboard] No session found, redirecting to signin");
    return Astro.redirect("/signin");
  }

  // Get user data from session
  const user = session.user;
  const email = user?.email;

  console.log("[Dashboard] Auth successful, rendering page");
} catch (error) {
  console.error("[Dashboard] Error during auth check:", {
    message: error.message,
    stack: error.stack?.split('\n')[0]
  });
  return Astro.redirect("/signin");
}
---

<DashboardLayout title="Dashboard - Saturdays.io" email={session.user.email} user={session.user}>
  <DashboardNav />

  <section class="p-4 gap-y-2 bg-black">
    <DashboardHeader />

    <!-- Stats -->
    <dl class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 mt-2 gap-2">
      {stats.map(stat => (
        <StatCard
          client:load
          name={stat.name}
          value={stat.value}
          unit={stat.unit}
        />
      ))}
    </dl>

    <!-- Fighter sections -->
    <div class="pt-8">
      <FighterSection client:load title="UFC Fighters" fighters={ufcFighters} />
    </div>
  </section>
</DashboardLayout>