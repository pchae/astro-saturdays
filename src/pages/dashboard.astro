---
import DashboardLayout from "../layouts/Dashboard.astro";
import DashboardHeader from "../components/dashboard/DashboardHeader.astro";
import DashboardNav from "../components/dashboard/DashboardNav.astro";
import type { User } from '@supabase/supabase-js';
// import { QueryProvider } from '@/components/QueryProvider';

// Use the auth middleware
export const prerender = false;

console.log("[Dashboard] Page load started");

// Debugging logs can remain if helpful
// ... (keep logs if desired) ...

// Remove Supabase client creation
/*
const supabase = createServerClient(...);
*/

// Remove direct auth check (getUser / getSession)
/*
console.log("[Dashboard] Starting auth check with getUser()");
const { data: { user }, error } = await supabase.auth.getUser();

let email: string | undefined; // Define email variable

if (error) {
  console.error("[Dashboard] Error during getUser():", error.message);
  return Astro.redirect("/signin");
}

if (!user) {
  console.log("[Dashboard] No authenticated user found via getUser(), redirecting to signin");
  return Astro.redirect("/signin");
}
*/

// Trust middleware: Get user from locals
// @ts-ignore - Astro/TS struggles with App.Locals inference here
const user = Astro.locals.user;

// Fallback check (should not be hit if middleware is correct)
if (!user) {
  console.error("[Dashboard] User not found in locals. Middleware might have failed. Redirecting...");
  return Astro.redirect("/signin");
}

// If getUser() succeeds, the user is authenticated
const email = user.email; // Get email from the validated user object
console.log("[Dashboard] Rendering page for user (from locals):", email);

// REMOVE Dashboard data (mock stats)
/*
const stats = [
  { name: 'Number of deploys', value: '9999' },
  { name: 'Average deploy time', value: '32', unit: 'seconds' },
  { name: 'Instances', value: '1' },
  { name: 'Status', value: 'ONLINE' },
];
*/

---

<DashboardLayout title="Dashboard - Saturdays.io" email={email} user={user}>
  <DashboardNav />

  <section class="p-4 gap-y-2 bg-black">
    <DashboardHeader />

    <section class="">
      <!-- DATA sections -->
      <div class="pt-8">
        <div class="bg-gray-800/30 border border-white/10 rounded-lg p-6 hover:bg-gray-700/30 transition-colors duration-200">
          <h3 class="text-lg font-medium text-white">
            Placeholder box for Data (Server Rendered?)
          </h3>
        </div>
      </div>
    </section>

    <section class="">
      <!-- New sections -->
        <div class="pt-8">
          <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 mt-2 gap-2">
            <div class="bg-gray-800/30 border border-white/10 rounded-lg p-6 hover:bg-gray-700/30 transition-colors duration-200">
              <h3 class="text-lg font-medium text-white">
                Placeholder box 2 (Server Rendered?)
              </h3>
            </div>
          </div>
        </div>
      </div>
    </section>

  </section>
</DashboardLayout>