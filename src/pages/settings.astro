---
import DashboardLayout from "../layouts/Dashboard.astro";
import { SettingsTabs } from "../components/settings/SettingsTabs";
import DashboardNav from "../components/dashboard/DashboardNav.astro";
// import { isPublicRoute } from "../middleware/auth";
// import { createServerClient, type CookieOptions } from '@supabase/ssr';
import type { User } from '@supabase/supabase-js'; // Import User type

// Check authentication
export const prerender = false;

// Remove Supabase client creation
/*
const supabase = createServerClient(...);
*/

// Remove direct auth check (getUser / getSession)
/*
console.log("[Settings] Starting auth check with getUser()");
const { data: { user }, error } = await supabase.auth.getUser();

let email: string | undefined;

if (error) {
  console.error("[Settings] Error during getUser():", error.message);
  return Astro.redirect("/signin");
}

if (!user) {
  console.log("[Settings] No authenticated user found via getUser(), redirecting to signin");
  return Astro.redirect('/signin');
}
*/

// Trust middleware: Get user from locals
// @ts-ignore - Astro/TS struggles with App.Locals inference here
const user = Astro.locals.user as User | null;

// Fallback check (should not be hit if middleware is correct)
if (!user) {
  console.error("[Settings] User not found in locals. Middleware might have failed. Redirecting...");
  return Astro.redirect("/signin");
}

// If getUser() succeeds, the user is authenticated
const email = user.email; // Get email from the validated user object
console.log("[Settings] Rendering page for user (from locals):", email);

// Get the active tab from URL hash or default to 'profile'
const hash = Astro.url.hash.slice(1) || 'profile';
---

<DashboardLayout title="Settings - Saturdays.io" email={email} user={user}>
  <DashboardNav />
  <div class="container p-4">
    <h1 class="text-3xl font-bold mb-8">Account Settings</h1>
    <SettingsTabs client:load defaultTab={hash} />
  </div>
</DashboardLayout>
