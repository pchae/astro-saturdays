---
import Layout from "../layouts/Layout.astro";
import Header from "../components/landing/Header";
import { createServerClient, type CookieOptions } from '@supabase/ssr';

export const prerender = false;
const { cookies, redirect } = Astro;

console.log("[Signin Page] Page load - Server side rendering");
console.log("[Signin Page] Environment:", {
  mode: import.meta.env.MODE,
  prod: import.meta.env.PROD,
  dev: import.meta.env.DEV,
  base: import.meta.env.BASE_URL
});

// Create server-side Supabase client with cookie handling
const supabase = createServerClient(
  import.meta.env.PUBLIC_SUPABASE_URL,
  import.meta.env.PUBLIC_SUPABASE_ANON_KEY,
  {
    cookies: {
      get: (key: string) => cookies.get(key)?.value,
      set: (key: string, value: string, options: CookieOptions) => {
        cookies.set(key, value, {
          ...options,
          path: '/',
        });
      },
      remove: (key: string, options: CookieOptions) => {
        cookies.delete(key, {
          ...options,
          path: '/',
        });
      },
    },
  }
);

// Check if user is already authenticated server-side using getUser()
const { data: { user }, error } = await supabase.auth.getUser();

// Optional: Log error if needed, but typically an error here means no valid session
if (error) {
  console.warn("[Signin Page] getUser check failed on load:", error.message);
}

// If getUser returns a user, they are logged in, redirect to dashboard
if (user) {
  console.log("[Signin Page] User already authenticated via getUser(), redirecting...");
  return redirect("/dashboard");
}

// Otherwise, continue to render the sign-in page
console.log("[Signin Page] No authenticated user found, rendering sign-in form.");
---

<Layout title="Sign in | Saturdays.io">

    <Header client:load />

    <main class="flex min-h-svh w-full flex-1 flex-col items-center justify-center p-4 md:p-8">
        <div class="w-full max-w-md border border-gray-200 rounded-lg p-4 shadow-xl shadow-red-100/50">
            <div class="sm:mx-auto sm:w-full sm:max-w-sm">
                <h2 class="mt-10 text-2xl lg:text-4xl font-bold tracking-tight text-gray-900">
                    Sign in
                </h2>
                <p class="mt-2 text-base leading-normal text-gray-600">
                    Enter your email below to sign in to your account
                </p>
            </div>
    
            <div class="mt-10 sm:mx-auto sm:w-full sm:max-w-sm">
                <form 
                    action="/api/auth/signin" 
                    method="POST" 
                    class="space-y-6"
                    id="signin-form"
                >
                    <div>
                        <label for="email" class="block text-sm/6 font-medium text-gray-900">
                            Email address
                        </label>
                        <div class="mt-2">
                            <input
                            id="email"
                            name="email"
                            type="email"
                            required
                            autocomplete="email"
                            class="block w-full rounded-md bg-white px-3 py-2 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline-2 focus:-outline-offset-2 focus:outline-blue-600 sm:text-sm/6"
                            />
                        </div>
                    </div>
    
                    <div>
                        <div class="flex items-center justify-between">
                            <label for="password" class="block text-sm/6 font-medium text-gray-900">
                            Password
                            </label>
                        </div>
                        
                        <div class="mt-2">
                            <input
                                id="password"
                                name="password"
                                type="password"
                                required
                                autocomplete="current-password"
                                class="block w-full rounded-md bg-white px-3 py-2 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline-2 focus:-outline-offset-2 focus:outline-blue-600 sm:text-sm/6"
                            />
                        </div>
                    </div>
    
                    <div>
                        <button
                            type="submit"
                            class="flex w-full justify-center rounded-md bg-blue-500 px-3 py-2 text-sm/6 font-semibold text-white shadow-xs hover:bg-blue-400 focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600"
                        >
                            Sign in
                        </button>
                    </div>
                </form>
    
                <p class="mt-8 text-center text-base leading-normal text-gray-700 pb-4">
                    Don't have an account?{' '}
                    <a href="/register" class="font-semibold text-blue-600 hover:text-blue-500">
                    Sign up
                    </a>
                </p>
            </div>
        </div>
    </main>
</Layout>

<script>
  // Client-side form validation and logging
  document.addEventListener('DOMContentLoaded', () => {
    console.log('[Signin Page] Client-side script loaded');
    
    const form = document.getElementById('signin-form') as HTMLFormElement;
    if (form) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const formData = new FormData(form);
        const email = formData.get('email');
        const password = formData.get('password');
        
        console.log('[Signin Page] Form submission attempt:', {
          hasEmail: !!email,
          emailLength: email?.toString().length,
          hasPassword: !!password,
          passwordLength: password?.toString().length,
          formAction: form.action,
          formMethod: form.method
        });
        
        try {
          const response = await fetch(form.action, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              email: email?.toString(),
              password: password?.toString()
            })
          });

          const data = await response.json();
          
          if (!response.ok) {
            console.error('[Signin Page] Sign-in failed:', data.error);
            // TODO: Show error message to user
            return;
          }

          console.log('[Signin Page] Sign-in successful:', {
            success: data.success,
            redirect: data.redirect
          });

          // Handle successful sign-in
          if (data.success && data.redirect) {
            window.location.href = data.redirect;
          } else {
            console.error('[Signin Page] Invalid success response:', data);
          }
        } catch (error) {
          console.error('[Signin Page] Sign-in error:', error);
          // TODO: Show error message to user
        }
      });
    } else {
      console.error('[Signin Page] Signin form not found in DOM');
    }
  });
</script>