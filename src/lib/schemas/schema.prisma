// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPPORT
}

enum CustomerType {
  INDIVIDUAL
  BUSINESS
}

enum AddressType {
  SHIPPING
  BILLING
  BOTH
}

// Payment Enums
enum SubscriptionStatus {
  NONE
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  UNPAID
}

enum PaymentMethodType {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  BANK_ACCOUNT
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
}

enum PaymentType {
  CHARGE
  REFUND
  SUBSCRIPTION_CHARGE
}

enum IntegrationProvider {
  STRIPE
  PAYPAL
}

enum IntegrationEventStatus {
  PROCESSED
  FAILED
  SKIPPED
}

// Add new enum for subscription intervals
enum SubscriptionInterval {
  MONTHLY
  YEARLY
}

// Models
model User {
  id                      String    @id @default(uuid())
  email                   String    @unique
  password                String?   // Optional since Supabase handles passwords
  emailVerified          Boolean   @default(false)
  emailVerificationToken  String?
  emailVerificationExpiry DateTime?
  passwordResetToken      String?
  passwordResetExpiry     DateTime?
  twoFactorEnabled        Boolean   @default(false)
  twoFactorSecret         String?
  role                    UserRole  @default(USER)
  isActive               Boolean   @default(true)
  lastLoginAt            DateTime?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  deletedAt              DateTime?

  // Relations
  profile                Profile?
  addresses             Address[]
  paymentMethods        PaymentMethod[]
  paymentTransactions   PaymentTransaction[]
  customerPaymentProfile CustomerPaymentProfile?

  @@index([email])
  @@map("users")
}

model Profile {
  id                     String       @id @default(uuid())
  userId                 String       @unique
  firstName              String
  lastName               String
  phoneNumber            String?
  customerType           CustomerType @default(INDIVIDUAL)
  taxIdentificationNumber String?
  companyName            String?
  companyPosition        String?
  defaultShippingAddressId String?
  defaultBillingAddressId  String?
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt

  // Relations
  user                   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  defaultShippingAddress Address?     @relation("DefaultShippingAddress", fields: [defaultShippingAddressId], references: [id])
  defaultBillingAddress  Address?     @relation("DefaultBillingAddress", fields: [defaultBillingAddressId], references: [id])

  @@index([userId])
  @@index([phoneNumber])
  @@map("profiles")
}

model Address {
  id            String      @id @default(uuid())
  userId        String
  name          String
  recipientName String
  phoneNumber   String
  address1      String
  address2      String?
  city          String
  state         String
  country       String
  zipcode       String
  addressType   AddressType @default(SHIPPING)
  isDefault     Boolean     @default(false)
  metadata      Json?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?

  // Relations
  user                    User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingProfileDefault  Profile[]           @relation("DefaultShippingAddress")
  billingProfileDefault   Profile[]           @relation("DefaultBillingAddress")
  paymentMethods          PaymentMethod[]

  @@index([userId])
  @@index([zipcode])
  @@index([country, state, city])
  @@map("addresses")
}

model CustomerPaymentProfile {
  id                   String             @id @default(uuid())
  userId               String             @unique
  stripeCustomerId     String             @unique
  defaultPaymentMethodId String?
  metadata            Json?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  // Relations
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentMethods     PaymentMethod[]
  subscriptions      CustomerSubscription[]

  @@index([stripeCustomerId])
  @@map("customer_payment_profiles")
}

model PaymentMethod {
  id                      String            @id @default(uuid())
  userId                  String
  customerPaymentProfileId String
  type                    PaymentMethodType
  providerPaymentMethodId String
  billingAddressId       String?
  isDefault              Boolean           @default(false)
  card_brand             String?
  last4                  String?
  exp_month              Int?
  exp_year               Int?
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  deletedAt              DateTime?

  // Relations
  user                   User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  customerPaymentProfile CustomerPaymentProfile @relation(fields: [customerPaymentProfileId], references: [id], onDelete: Cascade)
  billingAddress         Address?             @relation(fields: [billingAddressId], references: [id])
  transactions           PaymentTransaction[]

  @@index([userId])
  @@index([customerPaymentProfileId])
  @@index([providerPaymentMethodId])
  @@map("payment_methods")
}

model PaymentTransaction {
  id                     String         @id @default(uuid())
  userId                 String
  user                   User           @relation(fields: [userId], references: [id])
  paymentMethodId        String
  paymentMethod          PaymentMethod  @relation(fields: [paymentMethodId], references: [id])
  type                   PaymentType
  status                 PaymentStatus
  amount                 Int
  currency              String
  description           String?
  metadata              Json?
  stripePaymentIntentId String?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  processedRefunds      ProcessedRefund[]

  @@index([userId])
  @@index([paymentMethodId])
  @@map("payment_transactions")
}

model IntegrationEvent {
  id           String                 @id @default(uuid())
  provider     IntegrationProvider
  eventId      String                 @unique
  type         String
  data         Json
  status       IntegrationEventStatus @default(PROCESSED)
  error        String?
  processedAt  DateTime?
  createdAt    DateTime               @default(now())

  @@index([provider, eventId])
}

model SubscriptionPlan {
  id              String                @id @default(uuid())
  name            String
  description     String?
  price           Float
  currency        String                @default("USD")
  interval        SubscriptionInterval  @default(MONTHLY)
  features        Json?                 @default("{}")
  stripeProductId String                @unique
  stripePriceId   String                @unique
  metadata        Json?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  deletedAt       DateTime?
  subscriptions   CustomerSubscription[]

  @@index([currency])
  @@index([interval])
  @@map("subscription_plans")
}

model CustomerSubscription {
  id                  String            @id @default(uuid())
  customerId          String
  planId             String
  quantity           Int               @default(1)
  status             SubscriptionStatus @default(NONE)
  stripeSubscriptionId String           @unique
  currentPeriodStart  DateTime
  currentPeriodEnd    DateTime
  trialEndsAt         DateTime?
  cancelAtPeriodEnd   Boolean          @default(false)
  canceledAt          DateTime?
  lastPaymentError    String?
  metadata           Json?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  deletedAt          DateTime?
  
  customer           CustomerPaymentProfile @relation(fields: [customerId], references: [id], onDelete: Cascade)
  plan              SubscriptionPlan       @relation(fields: [planId], references: [id], onDelete: Restrict)

  @@index([customerId])
  @@index([planId])
  @@index([status])
  @@index([currentPeriodEnd])
  @@map("customer_subscriptions")
}

model ProcessedRefund {
  id              String            @id @default(uuid())
  idempotencyKey  String            @unique
  transactionId   String
  transaction     PaymentTransaction @relation(fields: [transactionId], references: [id])
  amount          Int?
  status          PaymentStatus
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  metadata        Json?

  @@index([idempotencyKey])
  @@map("processed_refunds")
}
