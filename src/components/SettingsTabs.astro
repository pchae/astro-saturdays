---
// Settings tabs navigation component
interface Tab {
  id: string;
  name: string;
  current: boolean;
}

interface Props {
  activeTab?: string;
}

const { activeTab = 'profile' } = Astro.props;

const tabs: Tab[] = [
  { id: 'profile', name: 'Profile', current: activeTab === 'profile' },
  { id: 'security', name: 'Security', current: activeTab === 'security' },
  { id: 'notifications', name: 'Notifications', current: activeTab === 'notifications' },
];
---

<div class="border-b border-white/10 mb-8">
  <nav class="-mb-px flex space-x-8" aria-label="Settings tabs">
    {tabs.map((tab) => (
      <a
        href={`#${tab.id}`}
        class={`whitespace-nowrap py-4 px-1 border-b-2 text-sm font-medium ${
          tab.current
            ? 'border-blue-500 text-blue-500'
            : 'border-transparent text-gray-400 hover:text-gray-300 hover:border-gray-300'
        }`}
        aria-current={tab.current ? 'page' : undefined}
        data-tab-id={tab.id}
      >
        {tab.name}
      </a>
    ))}
  </nav>
</div>

<script>
  // Client-side tab switching logic
  document.addEventListener('DOMContentLoaded', () => {
    const tabLinks = document.querySelectorAll('[data-tab-id]');
    const tabContents = document.querySelectorAll('[data-tab-content]');
    
    // Function to show the selected tab
    function showTab(tabId: string) {
      // Update tab links
      tabLinks.forEach(link => {
        const isActive = (link as HTMLElement).dataset.tabId === tabId;
        link.classList.toggle('border-blue-500', isActive);
        link.classList.toggle('text-blue-500', isActive);
        link.classList.toggle('border-transparent', !isActive);
        link.classList.toggle('text-gray-400', !isActive);
        if (isActive) {
          link.setAttribute('aria-current', 'page');
        } else {
          link.removeAttribute('aria-current');
        }
      });
      
      // Update tab contents
      tabContents.forEach(content => {
        const isActive = (content as HTMLElement).dataset.tabContent === tabId;
        content.classList.toggle('hidden', !isActive);
      });
      
      // Update URL hash
      window.location.hash = tabId;
    }
    
    // Add click event listeners to tab links
    tabLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const tabId = (link as HTMLElement).dataset.tabId;
        if (tabId) {
          showTab(tabId);
        }
      });
    });
    
    // Show the tab based on URL hash or default to first tab
    const initialTabId = window.location.hash.substring(1) || 'profile';
    showTab(initialTabId);
  });
</script> 