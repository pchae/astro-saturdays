---
// Define TypeScript interfaces for client logo data
interface Logo {
    id: string;
    src: string;
    alt: string;
    width: string;
    height: string;
    // Allow per-logo color customization
    fill?: string;     // For filled SVG elements
    stroke?: string;   // For outlined SVG elements
    opacity?: number;  // For transparency control
}

// Define component props with TypeScript
interface Props {
    // Custom heading text
    heading?: string;
    // Array of client logos with default value
    logos?: Logo[];
    // Additional CSS classes for the component
    class?: string;
    // Global logo color
    logoColor?: string;
    // Global stroke color for the logos
    logoStrokeColor?: string;
    // Global fill opacity
    logoOpacity?: number;
    // Background color class
    bgColor?: string;
    // Logo size (width and height in pixels)
    logoSize?: number;
    // Logo container background
    logoContainerClass?: string;
    // Monochrome mode - forces all logos to use the same color scheme
    monochrome?: boolean;
}

// Destructure props with default values
const {
    heading = "We've crafted meaningful digital experiences for brands around the world",
    logos = [
        {
            id: '0',
            src: '/logo/cbc.svg',
            alt: 'Canadian Broadcasting Corporation logo',
            width: '256px',
            height: '256px',
        },
        {
            id: '1',
            src: '/logo/usatoday.svg',
            alt: 'USA Today logo',
            width: '256px',
            height: '256px',
        },
        {
            id: '2',
            src: '/logo/reuters.svg',
            alt: 'Reuters logo',
            width: '256px',
            height: '256px',
        },
        {
            id: '3',
            src: '/logo/bloomberg.svg',
            alt: 'Bloomberg logo',
            width: '256px',
            height: '256px',
        },
        {
            id: '4',
            src: '/logo/starz.svg',
            alt: 'Starz Play logo',
            width: '256px',
            height: '256px',
        },
        {
            id: '5',
            src: '/logo/pbs.svg',
            alt: 'PBS logo',
            width: '256px',
            height: '256px',
        },
        {
            id: '6',
            src: '/logo/spc.svg',
            alt: 'Student Price Card logo',
            width: '256px',
            height: '256px',
        },
        {
            id: '7',
            src: '/logo/redbull.svg',
            alt: 'Redbull logo',
            width: '256px',
            height: '256px',
        },
        {
            id: '8',
            src: '/logo/latam.svg',
            alt: 'LATAM logo',
            width: '256px',
            height: '256px',
        },
        {
            id: '9',
            src: '/logo/avianca.svg',
            alt: 'Avianca logo',
            width: '256px',
            height: '256px',
        },
        {
            id: '10',
            src: '/logo/ogilvy.svg',
            alt: 'Ogilvy logo',
            width: '256px',
            height: '256px',
        },
        {
            id: '11',
            src: '/logo/plastic.svg',
            alt: 'Plastic Mobile logo',
            width: '256px',
            height: '256px',
        },
        {
            id: '12',
            src: '/logo/samsung.svg',
            alt: 'Samsung logo',
            width: '256px',
            height: '256px',
        },
        {
            id: '13',
            src: '/logo/dell.svg',
            alt: 'DELL EMC logo',
            width: '256px',
            height: '256px',
        },
        {
            id: '14',
            src: '/logo/cisco.svg',
            alt: 'Cisco Networks logo',
            width: '256px',
            height: '256px',
        },
        {
            id: '15',
            src: '/logo/microsoft.svg',
            alt: 'Microsoft logo',
            width: '256px',
            height: '256px',
        },
    ],
    class: className = '',
    logoColor = 'currentColor', // Default to inherit from text color
    logoStrokeColor = '',       // Default to none
    logoOpacity = 1,            // Default to fully opaque
    bgColor = '',
    logoSize = 36,
    logoContainerClass = '',
    monochrome = false,
} = Astro.props;

// CSS variables for global color control
const globalColorStyle = monochrome ? 
    { 
        '--logo-color': logoColor, 
        '--logo-stroke': logoStrokeColor,
        '--logo-opacity': logoOpacity
    } : {};
---

<section id="clients" class:list={[className]}>
    <div class="w-full border-y border-blue-200">
        <div class="mx-auto max-w-7xl space-y-8 px-4 md:px-8 py-16 md:py-20 lg:py-24 border-x border-red-200">
            <div>
                <h2 class="text-3xl md:text-4xl lg:text-5xl leading-snug text-center font-bold text-gray-800">
                    {heading}
                </h2>
            </div>
            <div class={`grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 justify-center items-center gap-8 overflow-hidden p-8 ${bgColor}`} style={globalColorStyle}>
                {logos.map(logo => {
                    // Individual logo color styles (only applied if monochrome is false)
                    const logoStyle = !monochrome && (logo.fill || logo.stroke || logo.opacity !== undefined) ? {
                        '--logo-color': logo.fill || logoColor,
                        '--logo-stroke': logo.stroke || logoStrokeColor,
                        '--logo-opacity': logo.opacity !== undefined ? logo.opacity : logoOpacity
                    } : {};
                    
                    return (
                        <div class={`logo ${logoContainerClass}`} style={!monochrome ? logoStyle : {}}>
                            <figure>
                                <img 
                                    class={`w-${logoSize} h-${logoSize} ${monochrome ? 'svg-monochrome' : ''}`} 
                                    src={logo.src} 
                                    alt={logo.alt} 
                                    loading="lazy" 
                                    width={logoSize * 4} 
                                    height={logoSize * 4}
                                >
                            </figure>
                        </div>
                    );
                })}
            </div>
        </div>
    </div>
</section>

<style>
    .logo {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0 2rem;
    }

    @media only screen and (max-width: 640px) {
        .logo {
            padding: 0 1rem;
        }
    }
    
    /* Apply colors to SVGs when in monochrome mode */
    .svg-monochrome {
        filter: opacity(var(--logo-opacity, 1));
    }
    
    /* For more advanced color control, we use a combination of CSS variables and filters */
    :global(.svg-monochrome svg path),
    :global(.svg-monochrome svg rect),
    :global(.svg-monochrome svg circle),
    :global(.svg-monochrome svg polygon) {
        fill: var(--logo-color, currentColor) !important;
        stroke: var(--logo-stroke, transparent) !important;
        opacity: var(--logo-opacity, 1) !important;
    }
</style>
